{"version":3,"sources":["vendor/ember-cli/tests-prefix.js","employee-manager/tests/acceptance/add-employee-test.js","employee-manager/tests/acceptance/employee-list-test.js","employee-manager/tests/acceptance/update-employee-test.js","employee-manager/tests/integration/components/employee-form-test.js","employee-manager/tests/test-helper.js","employee-manager/tests/test-helpers.js","employee-manager/tests/unit/models/employee-test.js","employee-manager/tests/unit/serializers/application-test.js","employee-manager/tests/unit/services/employee-service-test.js","employee-manager/tests/unit/services/persistance-test.js","vendor/ember-cli/app-config.js","vendor/ember-cli/tests-suffix.js"],"sourcesContent":["'use strict';\n","define(\"employee-manager/tests/acceptance/add-employee-test\", [\"qunit\", \"@ember/test-helpers\", \"ember-qunit\", \"employee-manager/tests/test-helpers\"], function (_qunit, _testHelpers, _emberQunit, _testHelpers2) {\n  \"use strict\";\n\n  (0, _qunit.module)('Acceptance | add employee', function (hooks) {\n    (0, _emberQunit.setupApplicationTest)(hooks);\n    hooks.beforeEach(async function () {\n      this.intl = this.owner.lookup('service:intl');\n      this.employeeService = this.owner.lookup('service:employee-service');\n      this.persistance = this.owner.lookup('service:persistance');\n      (0, _testHelpers2.seedEmployees)(this.employeeService, this.persistance)(0);\n      await (0, _testHelpers.visit)('/');\n    });\n    (0, _qunit.test)('clicking on \"Add Employee\" button takes you to new employee form', async function (assert) {\n      await (0, _testHelpers.click)('#add_employee_button');\n      assert.dom('#new_employee_form').exists('form is displayed');\n    });\n    (0, _qunit.test)('submitting the form with correct data', async function (assert) {\n      await (0, _testHelpers.click)('#add_employee_button');\n      await (0, _testHelpers.fillIn)('input#firstName', 'Brand');\n      await (0, _testHelpers.fillIn)('input#lastName', 'Newguy');\n      await (0, _testHelpers.fillIn)('input#email', 'brand@test.com');\n      await (0, _testHelpers.fillIn)('input#address', 'Some Street 12');\n      await (0, _testHelpers.fillIn)('input#salary', '1234');\n      await (0, _testHelpers.click)('#employee_submit');\n      assert.dom('#employee_list #employee_1').hasText('Brand Newguy', 'new entry appears the list');\n    });\n  });\n});","define(\"employee-manager/tests/acceptance/employee-list-test\", [\"qunit\", \"@ember/test-helpers\", \"ember-qunit\", \"employee-manager/tests/test-helpers\"], function (_qunit, _testHelpers, _emberQunit, _testHelpers2) {\n  \"use strict\";\n\n  (0, _qunit.module)('Acceptance | view employee list', function (hooks) {\n    (0, _emberQunit.setupApplicationTest)(hooks);\n    hooks.beforeEach(async function () {\n      this.intl = this.owner.lookup('service:intl');\n      this.employeeService = this.owner.lookup('service:employee-service');\n      this.persistance = this.owner.lookup('service:persistance');\n      this.seedEmployees = (0, _testHelpers2.seedEmployees)(this.employeeService, this.persistance);\n    });\n    (0, _qunit.test)('with no employees', async function (assert) {\n      this.seedEmployees(0);\n      await (0, _testHelpers.visit)('/');\n      assert.dom(\"#no_employees_message\").hasText(this.intl.t(\"employees.none\"), \"will show empty list message\");\n    });\n    (0, _qunit.test)('with less than six employees', async function (assert) {\n      this.seedEmployees(5);\n      await (0, _testHelpers.visit)('/');\n      assert.dom(\"#no_employees_message\").doesNotExist(\"no empty list message\");\n\n      for (let i = 1; i < 6; i++) {\n        assert.dom(`#employee_${i}`).hasText(`Test_${i} Tester_${i}`, `employee ${i} is listed`);\n      }\n\n      assert.dom('#next_button').doesNotExist('Next pager button is not visible');\n      assert.dom('#prev_button').doesNotExist('Previous pager button is not visible');\n    });\n    (0, _qunit.test)('with three pages of employees', async function (assert) {\n      this.seedEmployees(12); // Test first page\n\n      await (0, _testHelpers.visit)('/');\n\n      for (let i = 1; i < 6; i++) {\n        assert.dom(`#employee_${i}`).hasText(`Test_${i} Tester_${i}`, `employee ${i} is listed on page 1`);\n      }\n\n      assert.dom('#next_button').exists('Next pager button is visible on page 1');\n      assert.dom('#prev_button').doesNotExist('Previous pager button is not visible on page 1');\n      await (0, _testHelpers.click)('#next_button'); // Test second page\n\n      for (let i = 6; i < 11; i++) {\n        assert.dom(`#employee_${i}`).hasText(`Test_${i} Tester_${i}`, `employee ${i} is listed on page 2`);\n      }\n\n      assert.dom('#next_button').exists('Next pager button is visible on page 2');\n      assert.dom('#prev_button').exists('Previous pager button is visible on page 2');\n      await (0, _testHelpers.click)('#next_button'); // Test third page\n\n      for (let i = 11; i < 13; i++) {\n        assert.dom(`#employee_${i}`).hasText(`Test_${i} Tester_${i}`, `employee ${i} is listed on page 3`);\n      }\n\n      assert.dom('#next_button').doesNotExist('Next pager button is no visible on page 3');\n      assert.dom('#prev_button').exists('Previous pager button is visible on page 3');\n    });\n    (0, _qunit.test)('calculating salary stats', async function (assert) {\n      const salaries = [1224, 3224, 1123];\n      const total = salaries.reduce((acc, s) => acc + s, 0);\n      const average = (total / salaries.length).toFixed(2);\n      this.seedEmployees(3, salaries);\n      await (0, _testHelpers.visit)('/');\n      assert.dom('#total_salary_calculator p.amount').doesNotExist('total salary is not displayed');\n      assert.dom('#average_salary_calculator p.amount').doesNotExist('average salary is not displayed');\n      await (0, _testHelpers.click)('#total_salary_calculator button');\n      assert.dom('#total_salary_calculator p.amount').hasText(`$ ${total}`, 'after click total salary is visible');\n      await (0, _testHelpers.click)('#average_salary_calculator button');\n      assert.dom('#average_salary_calculator p.amount').hasText(`$ ${average}`, 'after click average salary is visible');\n    });\n  });\n});","define(\"employee-manager/tests/acceptance/update-employee-test\", [\"qunit\", \"@ember/test-helpers\", \"ember-qunit\", \"employee-manager/tests/test-helpers\"], function (_qunit, _testHelpers, _emberQunit, _testHelpers2) {\n  \"use strict\";\n\n  (0, _qunit.module)('Acceptance | show, edit and delete employee', function (hooks) {\n    (0, _emberQunit.setupApplicationTest)(hooks);\n    hooks.beforeEach(async function () {\n      this.intl = this.owner.lookup('service:intl');\n      this.employeeService = this.owner.lookup('service:employee-service');\n      this.persistance = this.owner.lookup('service:persistance');\n      (0, _testHelpers2.seedEmployees)(this.employeeService, this.persistance)(1);\n      await (0, _testHelpers.visit)('/');\n    });\n    (0, _qunit.test)('clicking on entry to view employee details', async function (assert) {\n      await (0, _testHelpers.click)('#employee_1');\n      assert.dom('h2#full_name').hasText('Test_1 Tester_1', 'full name is correct');\n      assert.dom('p#email').hasText('test_1@test.com', 'email is correct');\n      assert.dom('address#address_value').hasText('Street No 1', 'address is correct');\n      assert.dom('div#salary_value').hasText('$ 1000', 'salary is correct');\n    });\n    (0, _qunit.test)('clicking on \"Edit\" button takes you to a pre-populated edit form', async function (assert) {\n      await (0, _testHelpers.click)('#employee_1');\n      await (0, _testHelpers.click)('#edit_employee_button');\n      assert.dom('#edit_employee_form').exists();\n      assert.dom('input#firstName').hasValue('Test_1', 'first name is correct');\n      assert.dom('input#lastName').hasValue('Tester_1', 'last name is correct');\n      assert.dom('input#email').hasValue('test_1@test.com', 'email is correct');\n      assert.dom('input#address').hasValue('Street No 1', 'address is correct');\n      assert.dom('input#salary').hasValue('1000', 'salary is correct');\n    });\n    (0, _qunit.test)('submitting a changed form will reflect on the employee page and list', async function (assert) {\n      await (0, _testHelpers.click)('#employee_1');\n      await (0, _testHelpers.click)('#edit_employee_button');\n      await (0, _testHelpers.fillIn)('input#firstName', 'Edita');\n      await (0, _testHelpers.click)('#employee_submit');\n      assert.dom('h2#full_name').hasText('Edita Tester_1', 'name of employee page is updated');\n      await (0, _testHelpers.click)('#link_home');\n      assert.dom('#employee_list #employee_1').hasText('Edita Tester_1', 'name on employee list is updated');\n    });\n    (0, _qunit.test)('deleting an employee will remove him from the list', async function (assert) {\n      await (0, _testHelpers.click)('#employee_1'); // auto-confirm delete action\n\n      window.confirm = () => true;\n\n      await (0, _testHelpers.click)('#delete_employee_button');\n      assert.dom('#employee_1').doesNotExist('employee is removed from the employee list');\n      assert.dom(\"#no_employees_message\").hasText(this.intl.t(\"employees.none\"), \"employee list is empty\");\n    });\n  });\n});","define(\"employee-manager/tests/integration/components/employee-form-test\", [\"qunit\", \"ember-qunit\", \"@ember/test-helpers\"], function (_qunit, _emberQunit, _testHelpers) {\n  \"use strict\";\n\n  const mockService = (owner, serviceName, mockObject) => {\n    const MockService = Ember.Service.extend(mockObject);\n    Ember.run(() => {\n      owner.unregister(`service:${serviceName}`);\n      owner.register(`service:${serviceName}`, MockService);\n    });\n    return MockService;\n  };\n\n  (0, _qunit.module)('Integration | Component | employee-form', {\n    before: function () {\n      this.formId = \"test_employee_form\";\n      this.employee = {\n        firstName: 'Test',\n        lastName: 'Tester',\n        email: 'test@test.com',\n        address: 'Street Number 123',\n        salary: 1234\n      };\n      this.formFields = Object.keys(this.employee);\n    }\n  }, function (hooks) {\n    (0, _emberQunit.setupRenderingTest)(hooks);\n    hooks.beforeEach(function () {\n      this.intl = this.owner.lookup('service:intl');\n    });\n    (0, _qunit.test)('renders correctly with attribute data', async function (assert) {\n      // Set any properties with this.set('myProperty', 'value');\n      // Handle any actions with this.set('myAction', function(val) { ... });\n      await (0, _testHelpers.render)(Ember.HTMLBars.template(\n      /*\n        \n              <EmployeeForm\n                @id={{this.formId}}\n                @title=\"Employee Form\"\n                @submitLabel=\"Save\"\n                @submitCallback={{this.submitForm}}\n                @model={{this.employee}}\n              />\n      */\n      {\"id\":\"4scWV/nW\",\"block\":\"{\\\"symbols\\\":[],\\\"statements\\\":[[2,\\\"\\\\n        \\\"],[8,\\\"employee-form\\\",[],[[\\\"@id\\\",\\\"@title\\\",\\\"@submitLabel\\\",\\\"@submitCallback\\\",\\\"@model\\\"],[[32,0,[\\\"formId\\\"]],\\\"Employee Form\\\",\\\"Save\\\",[32,0,[\\\"submitForm\\\"]],[32,0,[\\\"employee\\\"]]]],null]],\\\"hasEval\\\":false,\\\"upvars\\\":[]}\",\"meta\":{}})); // Assert UI Labels\n\n      assert.dom(`#${this.formId} h3`).hasText(\"Employee Form\");\n      assert.dom(`#${this.formId} input#employee_submit`).hasValue(\"Save\"); // Assert inputs\n\n      this.formFields.forEach(field => {\n        assert.dom(`#${this.formId} label[for=${field}]`).hasText(this.intl.t(`employees.form.${field}`));\n        assert.dom(`#${this.formId} input#${field}`).hasValue(`${this.employee[field]}`);\n      });\n    });\n    (0, _qunit.test)('submitting with valid data triggers the submit callback', async function (assert) {\n      // Mock employee-service to succeed validation\n      mockService(this.owner, 'employee-service', {\n        validate: () => []\n      });\n      this.set('formSubmitted', false);\n      this.set('submitForm', () => {\n        this.set('formSubmitted', true);\n      });\n      await (0, _testHelpers.render)(Ember.HTMLBars.template(\n      /*\n        \n              <EmployeeForm\n                @id={{this.formId}}\n                @title=\"Employee Form\"\n                @submitLabel=\"Save\"\n                @submitCallback={{this.submitForm}}\n                @model={{this.employee}}\n              />\n      */\n      {\"id\":\"4scWV/nW\",\"block\":\"{\\\"symbols\\\":[],\\\"statements\\\":[[2,\\\"\\\\n        \\\"],[8,\\\"employee-form\\\",[],[[\\\"@id\\\",\\\"@title\\\",\\\"@submitLabel\\\",\\\"@submitCallback\\\",\\\"@model\\\"],[[32,0,[\\\"formId\\\"]],\\\"Employee Form\\\",\\\"Save\\\",[32,0,[\\\"submitForm\\\"]],[32,0,[\\\"employee\\\"]]]],null]],\\\"hasEval\\\":false,\\\"upvars\\\":[]}\",\"meta\":{}}));\n      await (0, _testHelpers.click)('#employee_submit');\n      assert.true(this.formSubmitted);\n    });\n    (0, _qunit.test)('submitting with invalid data displays errors', async function (assert) {\n      // Mock employee-service to fail validation\n      mockService(this.owner, 'employee-service', {\n        validate: () => [{\n          field: 'salary',\n          message: 'Invalid value'\n        }]\n      });\n      this.set('formSubmitted', false);\n      this.set('submitForm', () => {\n        this.set('formSubmitted', true);\n      });\n      await (0, _testHelpers.render)(Ember.HTMLBars.template(\n      /*\n        \n              <EmployeeForm\n                @id={{this.formId}}\n                @title=\"Employee Form\"\n                @submitLabel=\"Save\"\n                @submitCallback={{this.submitForm}}\n                @model={{this.employee}}\n              />\n      */\n      {\"id\":\"4scWV/nW\",\"block\":\"{\\\"symbols\\\":[],\\\"statements\\\":[[2,\\\"\\\\n        \\\"],[8,\\\"employee-form\\\",[],[[\\\"@id\\\",\\\"@title\\\",\\\"@submitLabel\\\",\\\"@submitCallback\\\",\\\"@model\\\"],[[32,0,[\\\"formId\\\"]],\\\"Employee Form\\\",\\\"Save\\\",[32,0,[\\\"submitForm\\\"]],[32,0,[\\\"employee\\\"]]]],null]],\\\"hasEval\\\":false,\\\"upvars\\\":[]}\",\"meta\":{}}));\n      await (0, _testHelpers.click)('#employee_submit');\n      assert.false(this.formSubmitted);\n    });\n  });\n});","define(\"employee-manager/tests/test-helper\", [\"employee-manager/app\", \"employee-manager/config/environment\", \"@ember/test-helpers\", \"ember-qunit\"], function (_app, _environment, _testHelpers, _emberQunit) {\n  \"use strict\";\n\n  (0, _testHelpers.setApplication)(_app.default.create(_environment.default.APP));\n  (0, _emberQunit.start)();\n});","define(\"employee-manager/tests/test-helpers\", [\"exports\"], function (_exports) {\n  \"use strict\";\n\n  Object.defineProperty(_exports, \"__esModule\", {\n    value: true\n  });\n  _exports.seedEmployees = void 0;\n\n  const seedEmployees = (employeeService, persistanceService) => (entries, salaries = []) => {\n    persistanceService.clear();\n\n    for (let i = 1; i < entries + 1; i++) {\n      const data = {\n        firstName: `Test_${i}`,\n        lastName: `Tester_${i}`,\n        email: `test_${i}@test.com`,\n        address: `Street No ${i}`,\n        salary: salaries[i - 1] || 1000\n      };\n      employeeService.addEmployee(data);\n    }\n  };\n\n  _exports.seedEmployees = seedEmployees;\n});","define(\"employee-manager/tests/unit/models/employee-test\", [\"qunit\", \"ember-qunit\", \"faker\"], function (_qunit, _emberQunit, _faker) {\n  \"use strict\";\n\n  (0, _qunit.module)('Unit | Model | employee', function (hooks) {\n    (0, _emberQunit.setupTest)(hooks);\n    (0, _qunit.test)('can store employee data', function (assert) {\n      const employeeData = {\n        firstName: _faker.default.name.firstName(),\n        lastName: _faker.default.name.lastName(),\n        email: _faker.default.internet.email(),\n        address: _faker.default.address.streetAddress(true),\n        salary: Math.floor(Math.random() * 5000)\n      };\n      let store = this.owner.lookup('service:store');\n      let model = store.createRecord('employee', employeeData);\n      assert.ok(model, 'Employee record created successfuly');\n      Object.entries(employeeData).forEach(([key, value]) => {\n        assert.equal(model[key], value, `${key} corectly recorded`);\n      });\n    });\n  });\n});","define(\"employee-manager/tests/unit/serializers/application-test\", [\"qunit\", \"ember-qunit\", \"employee-manager/tests/test-helpers\"], function (_qunit, _emberQunit, _testHelpers) {\n  \"use strict\";\n\n  (0, _qunit.module)('Unit | Serializer | application', {\n    before: function () {\n      this.employee = {\n        firstName: 'Test',\n        lastName: 'Tester',\n        email: 'test@test.com',\n        address: 'Street Number 123',\n        salary: 1234\n      };\n    }\n  }, function (hooks) {\n    (0, _emberQunit.setupTest)(hooks);\n    hooks.beforeEach(async function () {\n      this.employeeService = this.owner.lookup('service:employee-service');\n      this.persistance = this.owner.lookup('service:persistance');\n      (0, _testHelpers.seedEmployees)(this.employeeService, this.persistance)(0);\n    });\n    (0, _qunit.test)('it serializes records', function (assert) {\n      let store = this.owner.lookup('service:store');\n      let record = store.createRecord('employee', this.employee);\n      let serializedRecord = record.serialize();\n      assert.propEqual(serializedRecord.data.attributes, this.employee, 'serialized atrributes are correct');\n      assert.equal(serializedRecord.data.type, 'employees', 'serialized data type is correct');\n    });\n    (0, _qunit.test)('it normalizes records', async function (assert) {\n      let store = this.owner.lookup('service:store');\n      let saved = await store.createRecord('employee', this.employee).save();\n      let record = await store.findRecord('employee', saved.id);\n      assert.equal(record.firstName, this.employee.firstName, 'firstName normalized correctly');\n      assert.equal(record.lastName, this.employee.lastName, 'lastName normalized correctly');\n      assert.equal(record.email, this.employee.email, 'email normalized correctly');\n      assert.equal(record.address, this.employee.address, 'address normalized correctly');\n      assert.equal(record.salary, this.employee.salary, 'salary normalized correctly');\n    });\n  });\n});","define(\"employee-manager/tests/unit/services/employee-service-test\", [\"qunit\", \"ember-qunit\"], function (_qunit, _emberQunit) {\n  \"use strict\";\n\n  (0, _qunit.module)('Unit | Service | employee_service', function (hooks) {\n    (0, _emberQunit.setupTest)(hooks);\n    (0, _qunit.test)('fetching from an empty store', async function (assert) {\n      const service = this.owner.lookup('service:employee-service');\n      const all = await service.getAllEmployees();\n      const count = service.getEmployeeCount();\n      const total = await service.getSalarySum();\n      const average = await service.getAverageSalary();\n      const {\n        employees,\n        ...rest\n      } = await service.getEmployeesPaginated({\n        page: 1\n      });\n      assert.equal(all.length, 0, 'getAllEmployees returns an empty record');\n      assert.equal(employees.length, 0, 'getEmployeesPaginated returns an empty record');\n      assert.propEqual(rest, {\n        page: 1,\n        perPage: 5,\n        total: 0\n      }, 'getEmployeesPaginated returns correct format');\n      assert.equal(count, 0, 'getEmployeeCount returns zero');\n      assert.equal(average, 0, 'getAverageSalary returns zero');\n      assert.equal(total, 0, 'getSalarySum returns zero');\n    });\n    (0, _qunit.test)('adding one employee to store', async function (assert) {\n      const service = this.owner.lookup('service:employee-service');\n      const data = {\n        firstName: 'Test',\n        lastName: 'Tester',\n        email: 'test@test.com',\n        address: 'Test Street 1',\n        salary: 1234\n      };\n      await service.addEmployee(data);\n      const all = await service.getAllEmployees();\n      const count = service.getEmployeeCount();\n      const total = await service.getSalarySum();\n      const average = await service.getAverageSalary();\n      const {\n        employees,\n        ...rest\n      } = await service.getEmployeesPaginated({\n        page: 1\n      });\n      assert.equal(all.length, 1, 'getAllEmployees returns a one-item record');\n      assert.equal(employees.length, 1, 'getEmployeesPaginated returns a one-item record');\n      assert.propEqual(rest, {\n        page: 1,\n        perPage: 5,\n        total: 1\n      }, 'getEmployeesPaginated returns correct format');\n      assert.equal(count, 1, 'getEmployeeCount returns one');\n      assert.equal(average, 1234, 'getAverageSalary is correct');\n      assert.equal(total, 1234, 'getSalarySum is correct');\n    });\n    (0, _qunit.test)('adding two employees to store', async function (assert) {\n      const service = this.owner.lookup('service:employee-service');\n      const data = [{\n        firstName: 'Test_1',\n        lastName: 'Tester_1',\n        email: 'test_1@test.com',\n        address: 'Test Street 1',\n        salary: 1200\n      }, {\n        firstName: 'Test_2',\n        lastName: 'Tester_@',\n        email: 'test_2@test.com',\n        address: 'Test Street 2',\n        salary: 1800\n      }];\n      await service.addEmployee(data[0]);\n      await service.addEmployee(data[1]);\n      const all = await service.getAllEmployees();\n      const count = service.getEmployeeCount();\n      const total = await service.getSalarySum();\n      const average = await service.getAverageSalary();\n      const {\n        employees,\n        ...rest\n      } = await service.getEmployeesPaginated({\n        page: 1\n      });\n      assert.equal(all.length, 2, 'getAllEmployees returns a two-item record');\n      assert.equal(employees.length, 2, 'getEmployeesPaginated returns a two-item record');\n      assert.propEqual(rest, {\n        page: 1,\n        perPage: 5,\n        total: 2\n      }, 'getEmployeesPaginated returns correct format');\n      assert.equal(count, 2, 'getEmployeeCount returns two');\n      assert.equal(average, 1500, 'getAverageSalary is correct');\n      assert.equal(total, 3000, 'getSalarySum is correct');\n    });\n    (0, _qunit.test)('validating data', async function (assert) {\n      const service = this.owner.lookup('service:employee-service');\n      const validData = {\n        firstName: 'Test_1',\n        lastName: 'Tester_1',\n        email: 'test_1@test.com',\n        address: 'Test Street 1',\n        salary: 1200\n      };\n      const invalidData = {\n        firstName: '2',\n        lastName: 'Tester_@',\n        email: 'test_2@test.com',\n        address: 'Test Street 2',\n        salary: 'salary'\n      };\n      const noErrors = service.validate(validData);\n      const errors = service.validate(invalidData);\n      assert.equal(noErrors.length, 0, 'no errors for valid data');\n      assert.equal(errors.length, 2, 'errors for invalid data');\n    });\n    (0, _qunit.test)('delete employee from store', async function (assert) {\n      const service = this.owner.lookup('service:employee-service');\n      const data = {\n        firstName: 'Test',\n        lastName: 'Tester',\n        email: 'test@test.com',\n        address: 'Test Street 1',\n        salary: 1234\n      };\n      const employee = await service.addEmployee(data);\n      const all = await service.getAllEmployees();\n      assert.equal(all.length, 1, 'after adding we have 1 record');\n      await service.deleteEmployee(employee);\n      assert.equal(all.length, 0, 'after deleting we have 0 records');\n    });\n    (0, _qunit.test)('updating employee in store', async function (assert) {\n      const service = this.owner.lookup('service:employee-service');\n      const data = {\n        firstName: 'Test',\n        lastName: 'Tester',\n        email: 'test@test.com',\n        address: 'Test Street 1',\n        salary: 1234\n      };\n      const employee = await service.addEmployee(data);\n      const update = {\n        id: employee.id,\n        firstName: 'Test',\n        lastName: 'Tester',\n        email: 'test@test.com',\n        address: 'Test Street 1',\n        salary: 4321\n      };\n      await service.updateEmployee(update);\n      const updated = await service.getEmployee(employee.id);\n      assert.equal(updated.salary, 4321, 'updates employee data');\n    });\n    (0, _qunit.test)('generate employee data', async function (assert) {\n      const service = this.owner.lookup('service:employee-service');\n      const employeeData = service.generateEmployeeData(12); // Take random entry\n\n      const data = employeeData[Math.floor(Math.random() * 11)];\n      assert.equal(employeeData.length, 12, 'generates correct number of employee data');\n      assert.deepEqual(Object.keys(data), ['firstName', 'lastName', 'id', 'email', 'address', 'salary'], 'generated data has valid format');\n    });\n  });\n});","define(\"employee-manager/tests/unit/services/persistance-test\", [\"qunit\", \"ember-qunit\"], function (_qunit, _emberQunit) {\n  \"use strict\";\n\n  (0, _qunit.module)('Unit | Service | persistance', function (hooks) {\n    (0, _emberQunit.setupTest)(hooks);\n    (0, _qunit.test)('reading and writing', function (assert) {\n      const service = this.owner.lookup('service:persistance');\n      const data = ['test', 1, true];\n      service.write(data);\n      assert.equal(service.data, data, 'data persisted correctly');\n      const read = service.read();\n      assert.equal(read, data, 'data read correctly');\n    });\n  });\n});","define('employee-manager/config/environment', [], function() {\n  var prefix = 'employee-manager';\ntry {\n  var metaName = prefix + '/config/environment';\n  var rawConfig = document.querySelector('meta[name=\"' + metaName + '\"]').getAttribute('content');\n  var config = JSON.parse(decodeURIComponent(rawConfig));\n\n  var exports = { 'default': config };\n\n  Object.defineProperty(exports, '__esModule', { value: true });\n\n  return exports;\n}\ncatch(err) {\n  throw new Error('Could not read config from meta tag with name \"' + metaName + '\".');\n}\n\n});\n","require('employee-manager/tests/test-helper');\nEmberENV.TESTS_FILE_LOADED = true;\n"],"names":[],"mappings":"AAAA;;ACAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AC1BA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACrxGA;AACA;AACA;AACA;AACA;;ACJA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACvBA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACpBA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACrnKA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACbA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACjBA;AACA;","file":"tests.js"}